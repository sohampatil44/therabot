name: Therabot Deployment

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment stage (dev/prod)"
        required: true
        default: "dev"

jobs:
  deploy:
    name: Deploy to therabot-${{ github.event.inputs.stage }}
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: us-east-1
      STAGE: ${{ github.event.inputs.stage || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
    
      - name: Terraform Reconfigure Backend (Force Copy)
        if: always()
        run: |
          terraform init -reconfigure -force-copy \
            -backend-config="bucket=therabot-terraform-state" \
            -backend-config="key=therabot/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=therabot-terraform-lock" \
            -backend-config="encrypt=true"
        
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=therabot-terraform-state" \
            -backend-config="key=therabot/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=therabot-terraform-lock" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        id: terraform_plan
        run: |
          terraform plan -lock=false -out=tfplan \
            -var "stage=${{ github.event.inputs.stage || 'dev' }}" \
            -var-file="terraform.tfvars" \
            -var "github_token=${{ secrets.REPO_ACCESS_TOKEN }}"

      - name: Terraform Apply
        id: terraform_apply
        run: |
          terraform apply -lock=false tfplan 2>&1 | tee terraform-apply.log

      - name: Upload Terraform Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs
          path: terraform-apply.log

      - name: GET ALB DNS
        run: |
          alb_dns=$(terraform output -raw alb_dns_name 2>/dev/null | tr -d '\r\n')
          if [ -z "$alb_dns" ]; then
            echo "::error::ALB DNS is empty"
            exit 1
          fi
          echo "ALB_DNS=$alb_dns" >> $GITHUB_ENV
          echo "ALB DNS: $alb_dns"

      - name: Get EC2 public IP
        id: ec2_ip
        run: |
          ip=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=k3s-master-asg" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text | tr -d '\r\n' | awk 'NF && $1!="None" {print $1; exit}')

          echo "DEBUG: Raw IP fetched: '$ip'"
          
          if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "EC2_PUBLIC_IP=$ip" >> $GITHUB_ENV
            echo "ec2_public_ip=$ip" >> $GITHUB_OUTPUT
            echo "‚úÖ Successfully found therabot-asg instance IP: $ip"
          else
            echo "::error::Could not find valid therabot-asg instance IP address: '$ip'"
            exit 1
          fi

      - name: Show App URL
        run: echo "App live on http://${{ env.ALB_DNS }}"

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup SSH to Master Node
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEYPAIR_PRIVATE_KEY }}" > ~/.ssh/network-keypair.pem
          chmod 600 ~/.ssh/network-keypair.pem

      # ‚úÖ WAIT FOR K3S CLUSTER + KUBECONFIG PUBLIC-IP FIX
      - name: Wait for k3s cluster initialization
        run: |
          echo "üîÑ Waiting for k3s cluster (max 5 minutes)..."
          timeout=300
          elapsed=0
          interval=15

          # Debugging: Print EC2 public IP
          echo "DEBUG: Using EC2_PUBLIC_IP='$EC2_PUBLIC_IP'"

          while [ $elapsed -lt $timeout ]; do
            kubeconfig_content=$(aws ssm get-parameter \
              --name "/therabot/kubeconfig" \
              --query "Parameter.Value" \
              --output text 2>/dev/null || echo "")

            echo "DEBUG: kubeconfig_content length=${#kubeconfig_content}"
            if [ -n "$kubeconfig_content" ] && [ "$kubeconfig_content" != "None" ]; then
              echo "$kubeconfig_content" > kubeconfig
              chmod 600 kubeconfig
              echo "DEBUG: kubeconfig saved to file"

              # Fix server endpoint if still pointing to localhost
              current_server=$(grep "server:" kubeconfig | awk '{print $2}')
              echo "DEBUG: Current server in kubeconfig: $current_server"

              if [[ "$current_server" == *"127.0.0.1"* ]] || [[ "$current_server" == *"localhost"* ]]; then
                if [[ -n "$EC2_PUBLIC_IP" ]]; then
                  sed -i "s|https://127.0.0.1:6443|https://$EC2_PUBLIC_IP:6443|g" kubeconfig
                  sed -i "s|https://localhost:6443|https://$EC2_PUBLIC_IP:6443|g" kubeconfig
                  echo "‚úÖ Kubeconfig updated with public IP"
                else
                  echo "‚ùå No EC2 public IP to fix kubeconfig"
                  exit 1
                fi
              fi

              export KUBECONFIG=./kubeconfig
              echo "DEBUG: Testing kubectl connectivity..."
              if kubectl get nodes --request-timeout=30s >/dev/null 2>&1; then
                echo "‚úÖ k3s cluster is ready"
                kubectl get nodes
                break
              else
                echo "DEBUG: kubectl cannot reach cluster yet, retrying..."
              fi
            else
              echo "DEBUG: kubeconfig not yet available in SSM, retrying..."
            fi

            sleep $interval
            elapsed=$((elapsed + interval))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "‚ùå TIMEOUT waiting for k3s cluster"
            exit 1
          fi

      - name: Verify k3s cluster connectivity
        run: |
          export KUBECONFIG=./kubeconfig
          kubectl cluster-info --request-timeout=30s
          kubectl get nodes -o wide

      - name: Create namespace if not exists
        run: |
          export KUBECONFIG=./kubeconfig
          if ! kubectl get namespace development >/dev/null 2>&1; then
            kubectl create namespace development
            echo "üìÅ Created development namespace"
          fi

      - name: Validate Kubernetes manifests
        run: |
          export KUBECONFIG=./kubeconfig
          kubectl apply -f k8s/ --dry-run=client --namespace=development

      - name: Deploy manifests to k3s cluster
        run: |
          export KUBECONFIG=./kubeconfig
          kubectl apply -f k8s/ --namespace=development
          for deploy in $(kubectl get deployments -n development -o name); do
            kubectl rollout status $deploy -n development --timeout=300s
          done

      - name: Show Kubernetes App URL
        run: echo "üöÄ App live on http://${{ steps.ec2_ip.outputs.ec2_public_ip }}:30080"

      - name: Verify Deployment
        run: |
          export KUBECONFIG=./kubeconfig
          kubectl get all -n development

      - name: Cleanup on failure
        if: failure() || cancelled()
        run: |
          echo "üßπ Workflow failed or cancelled. Cleaning up..."
          if [ -f kubeconfig ]; then
            export KUBECONFIG=./kubeconfig
            kubectl delete namespace development --grace-period=30 --timeout=120s || true
          fi
          terraform destroy -auto-approve \
            -var "stage=${{ github.event.inputs.stage || 'dev' }}" \
            -var-file="terraform.tfvars" \
            -var "github_token=${{ secrets.REPO_ACCESS_TOKEN }}" || true

      - name: Remove kubeconfig
        if: always()
        run: rm -f ./kubeconfig
