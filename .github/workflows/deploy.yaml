name: Therabot Deployment

on:
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment stage (dev/prod)"
        required: true
        default: "dev"

jobs:
  deploy:
    name: Deploy to therabot-${{ github.event.inputs.stage }}
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: us-east-1
      STAGE: ${{ github.event.inputs.stage || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
    
      # Terraform Reconfigure Backend (only first run)
      - name: Terraform Reconfigure Backend (Force Copy)
        if: always()
        run: |
          terraform init -reconfigure -force-copy \
            -backend-config="bucket=therabot-terraform-state" \
            -backend-config="key=therabot/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=therabot-terraform-lock" \
            -backend-config="encrypt=true"
        
      # Terraform Init
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=therabot-terraform-state" \
            -backend-config="key=therabot/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=therabot-terraform-lock" \
            -backend-config="encrypt=true"

      # Terraform Plan
      - name: Terraform Plan
        id: terraform_plan
        run: |
          terraform plan -lock=false -out=tfplan \
            -var "stage=${{ github.event.inputs.stage || 'dev' }}" \
            -var-file="terraform.tfvars" \
            -var "github_token=${{ secrets.REPO_ACCESS_TOKEN }}"

      # Terraform Apply
      - name: Terraform Apply
        id: terraform_apply
        run: |
          terraform apply -lock=false tfplan 2>&1 | tee terraform-apply.log

      # Upload Terraform logs
      - name: Upload Terraform Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs
          path: terraform-apply.log

      # Get ALB DNS
      - name: GET ALB DNS
        run: |
          alb_dns=$(terraform output -raw alb_dns_name 2>/dev/null | tr -d '\r\n')
          if [ -z "$alb_dns" ]; then
            echo "::error::ALB DNS is empty"
            exit 1
          fi
          echo "ALB_DNS=$alb_dns" >> $GITHUB_ENV

      # Get EC2 public IP
      - name: Get EC2 public IP
        id: ec2_ip
        run: |
          ip=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=therabot-asg" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text | tr -d '\r\n' | awk 'NF && $1!="None" {print $1; exit}')
          
          if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "EC2_PUBLIC_IP=$ip" >> $GITHUB_ENV
            echo "ec2_public_ip=$ip" >> $GITHUB_OUTPUT
            echo "Successfully found therabot-asg instance IP: $ip"
          else
            echo "::error::Could not find valid therabot-asg instance IP address: '$ip'"
            exit 1
          fi

      - name: Show App URL
        run: echo "App live on http://${{ env.ALB_DNS }}"

      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Setup SSH key for master node
      - name: Setup SSH to Master Node
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEYPAIR_PRIVATE_KEY }}" > ~/.ssh/network-keypair.pem
          chmod 600 ~/.ssh/network-keypair.pem

      # Wait for k3s cluster initialization
      - name: Wait for k3s cluster initialization
        run: |
          echo "Waiting for k3s master node..."
          timeout=900  # 15 minutes
          elapsed=0
          interval=30
          
          while [ $elapsed -lt $timeout ]; do
            echo "Checking cluster... ($elapsed/${timeout}s)"
            
            kubeconfig_content=$(aws ssm get-parameter \
              --name "/therabot/kubeconfig" \
              --with-decryption \
              --query "Parameter.Value" \
              --output text 2>/dev/null || echo "")
            
            if [ -n "$kubeconfig_content" ]; then
              echo "$kubeconfig_content" > kubeconfig
              chmod 600 kubeconfig
              
              export KUBECONFIG=./kubeconfig
              if kubectl get nodes >/dev/null 2>&1; then
                echo "✅ k3s cluster is ready!"
                break
              else
                echo "⏳ Cluster not ready yet..."
              fi
            else
              echo "⏳ Kubeconfig not found in SSM yet..."
            fi
            
            sleep $interval
            elapsed=$((elapsed + interval))
          done
          
          if [ $elapsed -ge $timeout ]; then
            echo "::error::❌ Timeout waiting for k3s cluster to initialize"
            exit 1
          fi

      # Fetch kubeconfig
      - name: Fetch kubeconfig from SSM
        run: |
          aws ssm get-parameter \
            --name "/therabot/kubeconfig" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text > kubeconfig
          chmod 600 kubeconfig

      # Verify k3s cluster
      - name: Verify k3s cluster connectivity
        run: |
          export KUBECONFIG=./kubeconfig
          if kubectl cluster-info >/dev/null 2>&1; then
            echo "✅ k3s cluster is accessible!"
            kubectl get nodes
          else
            echo "::error::Failed to connect to k3s cluster"
            exit 1
          fi

      # Create namespace if missing
      - name: Create namespace if not exists
        run: |
          export KUBECONFIG=./kubeconfig
          if ! kubectl get namespace development >/dev/null 2>&1; then
            kubectl create namespace development
          fi

      # Validate k8s manifests
      - name: Validate Kubernetes manifests
        run: |
          export KUBECONFIG=./kubeconfig
          if [ ! -d "k8s" ] || [ -z "$(ls -A k8s 2>/dev/null)" ]; then
            echo "::error::k8s directory empty"
            exit 1
          fi
          kubectl apply -f k8s/ --dry-run=client --namespace=development

      # Deploy manifests
      - name: Deploy manifests to k3s cluster
        run: |
          export KUBECONFIG=./kubeconfig
          kubectl apply -f k8s/ --namespace=development
          
          # Wait for deployments
          for deploy in $(kubectl get deployments -n development -o name); do
            kubectl rollout status $deploy -n development --timeout=300s
          done

      - name: Show Kubernetes App URL
        run: echo "🚀 App live on http://${{ steps.ec2_ip.outputs.ec2_public_ip }}:30080"

      # Deployment verification
      - name: Verify Deployment
        run: |
          export KUBECONFIG=./kubeconfig
          kubectl get all -n development

      # Cleanup on failure
      - name: Cleanup on failure
        if: failure() || cancelled()
        run: |
          echo "🧹 Workflow failed or cancelled. Cleaning up..."
          if [ -f kubeconfig ]; then
            export KUBECONFIG=./kubeconfig
            kubectl delete namespace development --grace-period=30 --timeout=120s || true
          fi
          terraform destroy -auto-approve \
            -var "stage=${{ github.event.inputs.stage || 'dev' }}" \
            -var-file="terraform.tfvars" \
            -var "github_token=${{ secrets.REPO_ACCESS_TOKEN }}" || true

      # Remove kubeconfig
      - name: Remove kubeconfig
        if: always()
        run: rm -f ./kubeconfig
